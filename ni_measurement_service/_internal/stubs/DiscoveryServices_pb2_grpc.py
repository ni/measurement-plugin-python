# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import DiscoveryServices_pb2 as DiscoveryServices__pb2
from . import ServiceLocation_pb2 as ServiceLocation__pb2


class RegistryServiceStub(object):
    """Service registry for the Measurement Services System. Measurement Services uses Client
    Used to:
    Register Services - When a service starts up it can dynamically register
    Service Enumeration - Find all classes of a service which implement a specific
    service interface
    Service Path Resolution - Used to find optimal instances and network paths to
    a specific service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterService = channel.unary_unary(
            "/ni.measurements.discovery.v1.RegistryService/RegisterService",
            request_serializer=DiscoveryServices__pb2.RegisterServiceRequest.SerializeToString,
            response_deserializer=DiscoveryServices__pb2.RegisterServiceResponse.FromString,
        )
        self.UnregisterService = channel.unary_unary(
            "/ni.measurements.discovery.v1.RegistryService/UnregisterService",
            request_serializer=DiscoveryServices__pb2.UnregisterServiceRequest.SerializeToString,
            response_deserializer=DiscoveryServices__pb2.UnregisterServiceResponse.FromString,
        )
        self.EnumerateServices = channel.unary_unary(
            "/ni.measurements.discovery.v1.RegistryService/EnumerateServices",
            request_serializer=DiscoveryServices__pb2.EnumerateServicesRequest.SerializeToString,
            response_deserializer=DiscoveryServices__pb2.EnumerateServicesResponse.FromString,
        )
        self.ResolveService = channel.unary_unary(
            "/ni.measurements.discovery.v1.RegistryService/ResolveService",
            request_serializer=DiscoveryServices__pb2.ResolveServiceRequest.SerializeToString,
            response_deserializer=ServiceLocation__pb2.ServiceLocation.FromString,
        )
        self.ResolveMonikerEndpoint = channel.unary_unary(
            "/ni.measurements.discovery.v1.RegistryService/ResolveMonikerEndpoint",
            request_serializer=DiscoveryServices__pb2.ResolveMonikerEndpointRequest.SerializeToString,
            response_deserializer=ServiceLocation__pb2.ServiceLocation.FromString,
        )


class RegistryServiceServicer(object):
    """Service registry for the Measurement Services System. Measurement Services uses Client
    Used to:
    Register Services - When a service starts up it can dynamically register
    Service Enumeration - Find all classes of a service which implement a specific
    service interface
    Service Path Resolution - Used to find optimal instances and network paths to
    a specific service
    """

    def RegisterService(self, request, context):
        """Registers a service instance with the registry"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UnregisterService(self, request, context):
        """Unregisters a service instance with the registry"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EnumerateServices(self, request, context):
        """Enumerate all services which implement a specific service interface
        This is useful for plugin type systems where the possible services are not know ahead of time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveService(self, request, context):
        """Given a specific service class this will find the best service implementation which
        best optimizes communication performance. Factors such as data path and service load
        will be taken into account
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ResolveMonikerEndpoint(self, request, context):
        """Given a specific moniker endpoint this will find the best data path to use to
        optimize the performance of communcation.  For example if there are multiple
        network paths (1Gb public IP, and 10Gb link-local) this will resolve to the path
        which will give the best performance.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_RegistryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "RegisterService": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterService,
            request_deserializer=DiscoveryServices__pb2.RegisterServiceRequest.FromString,
            response_serializer=DiscoveryServices__pb2.RegisterServiceResponse.SerializeToString,
        ),
        "UnregisterService": grpc.unary_unary_rpc_method_handler(
            servicer.UnregisterService,
            request_deserializer=DiscoveryServices__pb2.UnregisterServiceRequest.FromString,
            response_serializer=DiscoveryServices__pb2.UnregisterServiceResponse.SerializeToString,
        ),
        "EnumerateServices": grpc.unary_unary_rpc_method_handler(
            servicer.EnumerateServices,
            request_deserializer=DiscoveryServices__pb2.EnumerateServicesRequest.FromString,
            response_serializer=DiscoveryServices__pb2.EnumerateServicesResponse.SerializeToString,
        ),
        "ResolveService": grpc.unary_unary_rpc_method_handler(
            servicer.ResolveService,
            request_deserializer=DiscoveryServices__pb2.ResolveServiceRequest.FromString,
            response_serializer=ServiceLocation__pb2.ServiceLocation.SerializeToString,
        ),
        "ResolveMonikerEndpoint": grpc.unary_unary_rpc_method_handler(
            servicer.ResolveMonikerEndpoint,
            request_deserializer=DiscoveryServices__pb2.ResolveMonikerEndpointRequest.FromString,
            response_serializer=ServiceLocation__pb2.ServiceLocation.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ni.measurements.discovery.v1.RegistryService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class RegistryService(object):
    """Service registry for the Measurement Services System. Measurement Services uses Client
    Used to:
    Register Services - When a service starts up it can dynamically register
    Service Enumeration - Find all classes of a service which implement a specific
    service interface
    Service Path Resolution - Used to find optimal instances and network paths to
    a specific service
    """

    @staticmethod
    def RegisterService(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.discovery.v1.RegistryService/RegisterService",
            DiscoveryServices__pb2.RegisterServiceRequest.SerializeToString,
            DiscoveryServices__pb2.RegisterServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UnregisterService(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.discovery.v1.RegistryService/UnregisterService",
            DiscoveryServices__pb2.UnregisterServiceRequest.SerializeToString,
            DiscoveryServices__pb2.UnregisterServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EnumerateServices(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.discovery.v1.RegistryService/EnumerateServices",
            DiscoveryServices__pb2.EnumerateServicesRequest.SerializeToString,
            DiscoveryServices__pb2.EnumerateServicesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveService(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.discovery.v1.RegistryService/ResolveService",
            DiscoveryServices__pb2.ResolveServiceRequest.SerializeToString,
            ServiceLocation__pb2.ServiceLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ResolveMonikerEndpoint(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.discovery.v1.RegistryService/ResolveMonikerEndpoint",
            DiscoveryServices__pb2.ResolveMonikerEndpointRequest.SerializeToString,
            ServiceLocation__pb2.ServiceLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
