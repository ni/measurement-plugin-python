# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ni_measurement_service._internal.stubs import SessionManager_pb2 as SessionManager__pb2


class SessionManagerServiceStub(object):
    """Service that contains methods related to managing driver sessions"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReserveSessions = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/ReserveSessions",
            request_serializer=SessionManager__pb2.ReserveSessionsRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.ReserveSessionsResponse.FromString,
        )
        self.UnreserveSessions = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/UnreserveSessions",
            request_serializer=SessionManager__pb2.UnreserveSessionsRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.UnreserveSessionsResponse.FromString,
        )
        self.RegisterSessions = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/RegisterSessions",
            request_serializer=SessionManager__pb2.RegisterSessionsRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.RegisterSessionsResponse.FromString,
        )
        self.UnregisterSessions = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/UnregisterSessions",
            request_serializer=SessionManager__pb2.UnregisterSessionsRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.UnregisterSessionsResponse.FromString,
        )
        self.ReserveAllSessionsFromPinMap = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/ReserveAllSessionsFromPinMap",
            request_serializer=SessionManager__pb2.ReserveAllSessionsFromPinMapRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.ReserveAllSessionsFromPinMapResponse.FromString,
        )
        self.ReserveAllRegisteredSessions = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/ReserveAllRegisteredSessions",
            request_serializer=SessionManager__pb2.ReserveAllRegisteredSessionsRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.ReserveAllRegisteredSessionsResponse.FromString,
        )
        self.SetActivePinMap = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/SetActivePinMap",
            request_serializer=SessionManager__pb2.SetActivePinMapRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.SetActivePinMapResponse.FromString,
        )
        self.ClearActivePinMap = channel.unary_unary(
            "/ni.measurements.v1.SessionManagerService/ClearActivePinMap",
            request_serializer=SessionManager__pb2.ClearActivePinMapRequest.SerializeToString,
            response_deserializer=SessionManager__pb2.ClearActivePinMapResponse.FromString,
        )


class SessionManagerServiceServicer(object):
    """Service that contains methods related to managing driver sessions"""

    def ReserveSessions(self, request, context):
        """Reserve session(s) for the given pins, sites, and instrument type and return the session names and channel lists.
        Returns the session name for each session, which allows the measurement service to get or create the session. Also returns the channel list.
        Also reserves the session (in Session Managers's own session reservation system) so other processes cannot access it.
        The request message for this method includes a timeout value, which allows the client to specify no timeout, infinite timeout, or a timeout value in milliseconds.
        Error occurs if the session cannot be reserved because a session by that name is already reserved, when timeout is set to 0 or a positive numeric value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UnreserveSessions(self, request, context):
        """Unreserves sessions so they can be accessed by other clients."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterSessions(self, request, context):
        """Registers the sessions with the Session Manager. Indicates that the sessions are open and will need to be closed later.
        Error occurs if a session by the same name is already registered.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UnregisterSessions(self, request, context):
        """Unregisters the sessions from the Session Manager. Indicates that the sessions have been closed and will need to be reopened before they can be used again."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReserveAllSessionsFromPinMap(self, request, context):
        """Reserves and gets all session information from the pin map.
        Used in init code to create sessions.
        Returns the session name, resource name, channel list, and instrument type ID for each session.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReserveAllRegisteredSessions(self, request, context):
        """Reserves and gets all sessions currently registered in the Session Manager."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetActivePinMap(self, request, context):
        """NOTE: The two "ActivePinMap" methods below are not decided on for 1.0. There is a feature to determine whether this concept is needed.

        Sets the given pin map as active, allowing sessions to be opened to it.
        Throws an error if another pin map is already active.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ClearActivePinMap(self, request, context):
        """ "Un-sets" the active pin map, allowing another pin map to be made active."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SessionManagerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ReserveSessions": grpc.unary_unary_rpc_method_handler(
            servicer.ReserveSessions,
            request_deserializer=SessionManager__pb2.ReserveSessionsRequest.FromString,
            response_serializer=SessionManager__pb2.ReserveSessionsResponse.SerializeToString,
        ),
        "UnreserveSessions": grpc.unary_unary_rpc_method_handler(
            servicer.UnreserveSessions,
            request_deserializer=SessionManager__pb2.UnreserveSessionsRequest.FromString,
            response_serializer=SessionManager__pb2.UnreserveSessionsResponse.SerializeToString,
        ),
        "RegisterSessions": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterSessions,
            request_deserializer=SessionManager__pb2.RegisterSessionsRequest.FromString,
            response_serializer=SessionManager__pb2.RegisterSessionsResponse.SerializeToString,
        ),
        "UnregisterSessions": grpc.unary_unary_rpc_method_handler(
            servicer.UnregisterSessions,
            request_deserializer=SessionManager__pb2.UnregisterSessionsRequest.FromString,
            response_serializer=SessionManager__pb2.UnregisterSessionsResponse.SerializeToString,
        ),
        "ReserveAllSessionsFromPinMap": grpc.unary_unary_rpc_method_handler(
            servicer.ReserveAllSessionsFromPinMap,
            request_deserializer=SessionManager__pb2.ReserveAllSessionsFromPinMapRequest.FromString,
            response_serializer=SessionManager__pb2.ReserveAllSessionsFromPinMapResponse.SerializeToString,
        ),
        "ReserveAllRegisteredSessions": grpc.unary_unary_rpc_method_handler(
            servicer.ReserveAllRegisteredSessions,
            request_deserializer=SessionManager__pb2.ReserveAllRegisteredSessionsRequest.FromString,
            response_serializer=SessionManager__pb2.ReserveAllRegisteredSessionsResponse.SerializeToString,
        ),
        "SetActivePinMap": grpc.unary_unary_rpc_method_handler(
            servicer.SetActivePinMap,
            request_deserializer=SessionManager__pb2.SetActivePinMapRequest.FromString,
            response_serializer=SessionManager__pb2.SetActivePinMapResponse.SerializeToString,
        ),
        "ClearActivePinMap": grpc.unary_unary_rpc_method_handler(
            servicer.ClearActivePinMap,
            request_deserializer=SessionManager__pb2.ClearActivePinMapRequest.FromString,
            response_serializer=SessionManager__pb2.ClearActivePinMapResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "ni.measurements.v1.SessionManagerService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class SessionManagerService(object):
    """Service that contains methods related to managing driver sessions"""

    @staticmethod
    def ReserveSessions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/ReserveSessions",
            SessionManager__pb2.ReserveSessionsRequest.SerializeToString,
            SessionManager__pb2.ReserveSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UnreserveSessions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/UnreserveSessions",
            SessionManager__pb2.UnreserveSessionsRequest.SerializeToString,
            SessionManager__pb2.UnreserveSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def RegisterSessions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/RegisterSessions",
            SessionManager__pb2.RegisterSessionsRequest.SerializeToString,
            SessionManager__pb2.RegisterSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UnregisterSessions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/UnregisterSessions",
            SessionManager__pb2.UnregisterSessionsRequest.SerializeToString,
            SessionManager__pb2.UnregisterSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ReserveAllSessionsFromPinMap(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/ReserveAllSessionsFromPinMap",
            SessionManager__pb2.ReserveAllSessionsFromPinMapRequest.SerializeToString,
            SessionManager__pb2.ReserveAllSessionsFromPinMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ReserveAllRegisteredSessions(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/ReserveAllRegisteredSessions",
            SessionManager__pb2.ReserveAllRegisteredSessionsRequest.SerializeToString,
            SessionManager__pb2.ReserveAllRegisteredSessionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetActivePinMap(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/SetActivePinMap",
            SessionManager__pb2.SetActivePinMapRequest.SerializeToString,
            SessionManager__pb2.SetActivePinMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ClearActivePinMap(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/ni.measurements.v1.SessionManagerService/ClearActivePinMap",
            SessionManager__pb2.ClearActivePinMapRequest.SerializeToString,
            SessionManager__pb2.ClearActivePinMapResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
