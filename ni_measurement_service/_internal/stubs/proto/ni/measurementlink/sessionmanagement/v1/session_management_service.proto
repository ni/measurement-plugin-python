syntax = "proto3";

package ni.measurementlink.sessionmanagement.v1;

import "ni/measurementlink/pin_map_context.proto";

option csharp_namespace = "NationalInstruments.MeasurementLink.SessionManagement.V1";
option go_package = "sessionmanagementv1";
option java_multiple_files = true;
option java_outer_classname = "SessionManagementProto";
option java_package = "com.ni.measurementlink.sessionmanagement.v1";
option objc_class_prefix = "NIMS";
option php_namespace = "NI\\MeasurementLink\\SessionManagement\\V1";
option ruby_package = "NI::MeasurementLink::SessionManagement::V1";

// Service to keep track of open sessions used by measurement services, and to allow measurement services to access sessions by pin and site.
service SessionManagementService {
    // Reserve session(s) for the given pins, sites, and instrument type ID and returns the information needed to create or access the session.
    // (Will be implemented in AB#2046548) Also reserves the session so other processes cannot access it with a ReserveSessions() call.
    // Status Codes for errors:
    // - INVALID_ARGUMENT:
    //     - Pin Map Context references a site number that is not defined in the pin map
    //     - Pin name does not match any pin names or pin group names in the pin map
    // - NOT_FOUND:
    //     - Pin Map Context has a pin map ID that does not match any pin maps registered with the Pin Map Service.
    rpc ReserveSessions(ReserveSessionsRequest) returns (ReserveSessionsResponse);

    // Unreserves sessions so they can be accessed by other clients.
    rpc UnreserveSessions(UnreserveSessionsRequest) returns (UnreserveSessionsResponse);

    // Registers the sessions with this service. Indicates that the sessions are open and will need to be closed later.
    // Status Codes for errors:
    // - ALREADY_EXISTS:
    //     - Session by the same name is already registered.
    // - INVALID_ARGUMENT:
    //     - Session names list has an empty string.
    rpc RegisterSessions(RegisterSessionsRequest) returns (RegisterSessionsResponse);

    // Unregisters the sessions with this service. Indicates that the sessions have been closed and will need to be reopened before they can be used again.
    rpc UnregisterSessions(UnregisterSessionsRequest) returns (UnregisterSessionsResponse);

    // Reserves and gets all sessions currently registered with this service.
    rpc ReserveAllRegisteredSessions(ReserveAllRegisteredSessionsRequest) returns (ReserveAllRegisteredSessionsResponse);
}

// Session identification information. Used to reference a specific session in NI grpc-device or in any other driver session management system.
message Session {
    // Required. Session name to uniquely identify the session in NI grpc-device or other drivers.
    string name = 1;
}

message SessionInformation{
    // Session identifier used to identify the session in the session management service, as well as in driver services such as grpc-device.
    // This field is readonly.
    Session session = 1;

    // Resource name used to open this session in the driver.
    // This field is readonly.
    string resource_name = 2;

    // Channel list used for driver initialization and measurement methods.
    // This field is empty for any SessionInformation returned from ReserveAllRegisteredSessions.
    // This field is readonly.
    string channel_list = 3;

    // Instrument type ID to identify which type of instrument the session represents.
    // Pin maps have built in instrument definitions using the following NI driver based instrument type ids:
    //      "niDCPower"
    //      "niDigitalPattern"
    //      "niScope"
    //      "niDMM"
    //      "niDAQmx".
    // For custom instruments the user defined instrument type id is defined in the pin map file.
    // This field is readonly.
    string instrument_type_id = 4;

    // Indicates whether the session exists in the Session Manager. This indicates whether the session has been created.
    // This field is readonly.
    bool session_exists = 5;
}

message ReserveSessionsRequest {
    // Required. Includes the pin map ID for the pin map in the Pin Map Service, as well as the list of sites for the measurement.
    PinMapContext pin_map_context = 1;

    // Optional. List of pin names or pin group names to use for the measurement. If unspecified, reserve sessions for all pins in the registered pin map resource.
    repeated string pin_names = 2;

    // Optional. Instrument type ID for the measurement. If unspecified, reserve sessions for all instrument types connected in the registered pin map resource.
    // Pin maps have built in instrument definitions using the following NI driver based instrument type ids:
    //      "niDCPower"
    //      "niDigitalPattern"
    //      "niScope"
    //      "niDMM"
    //      "niDAQmx".
    // For custom instruments the user defined instrument type id is defined in the pin map file.
    string instrument_type_id = 3;

    // Optional. Timeout for the reservation request.
    // Allowed values: 0 (non-blocking, fails immediately if resources cannot be reserved), -1 (infinite timeout), or any other positive numeric value (wait for that number of milliseconds)
    int32 timeout_in_milliseconds = 4;
}

message ReserveSessionsResponse{
    // List of information needed to create or use each session for the given pin, site, and instrument type ID.
    // This field is readonly.
    repeated SessionInformation sessions = 1;
}

message UnreserveSessionsRequest {
    // Required. List of information of sessions to be unreserved in the session management service.
    repeated SessionInformation sessions = 1;
}

message UnreserveSessionsResponse {
}

message RegisterSessionsRequest{
    // Required. List of sessions to register with the session management service to track as the sessions are open.
    repeated SessionInformation sessions = 1;
}

message RegisterSessionsResponse{
}

message UnregisterSessionsRequest{
    // Required. List of sessions to unregister with the session management service to mark them as sessions were closed.
    repeated SessionInformation sessions = 1;
}

message UnregisterSessionsResponse{
}

message ReserveAllRegisteredSessionsRequest {
    // Optional. Timeout for the reservation request.
    // Allowed values: 0 (non-blocking, fails immediately if resources cannot be reserved), -1 (infinite timeout), or any other positive numeric value (wait for that number of milliseconds)
    int32 timeout_in_milliseconds = 1;
}

message ReserveAllRegisteredSessionsResponse{
    // Sessions currently registered in the session management service.
    repeated SessionInformation sessions = 1;
}
