syntax = "proto3";

package ni.measurementlink.pinmap.v1;

option csharp_namespace = "NationalInstruments.MeasurementLink.PinMap.V1";
option go_package = "pinmapv1";
option java_multiple_files = true;
option java_outer_classname = "PinMapServiceProto";
option java_package = "com.ni.measurementlink.pinmap.v1";
option objc_class_prefix = "NIMP";
option php_namespace = "NI\\MeasurementLink\\PinMap\\V1";
option ruby_package = "NI::MeasurementLink::PinMap::V1";

// Service to keep track of pin map resources.
service PinMapService {
    // Registers pin map with the PinMapService and returns a pin map resource.
    // Status Codes for errors:
    // - INVALID_ARGUMENT: Pin map id is empty or has whitespace, or pin map xml string is not valid
    // - ALREADY_EXISTS: Pin map resource with the specified pin map id already exists
    rpc CreatePinMapFromXml(CreatePinMapFromXmlRequest) returns(PinMap);

    // Updates registered pin map contents and returns it.
    // Creates and registers a pin map if a pin map resource for the specified pin map id is not found.
    // Status Codes for errors:
    // - INVALID_ARGUMENT: Pin map xml string is not valid
    rpc UpdatePinMapFromXml(UpdatePinMapFromXmlRequest) returns (PinMap);

    // Get registered pin map resource.
    // Status Codes for errors:
    // - NOT_FOUND: Pin map resource for the specified pin map id is not found
    rpc GetPinMap(GetPinMapRequest) returns(PinMap);

    // Returns list of pins from the registered pin map resource.
    // Status Codes for errors:
    // - NOT_FOUND: Pin map resource for the specified pin map id is not found
    rpc QueryPins(QueryPinsRequest) returns (QueryPinsResponse);

    // Returns list of relays from the registered pin map resource.
    // Status Codes for errors:
    // - NOT_FOUND: Pin map resource for the specified pin map id is not found
    rpc QueryRelays(QueryRelaysRequest) returns (QueryRelaysResponse);

    // Get instrument resource names, channels, and instrument type for the specified sites, pins or pin groups, relays or relay groups, instrument type in the registered pin map resource.
    // Status Codes for errors:
    // - NOT_FOUND:
    //   - Pin map resource for the specified pin map id is not found.
    //   - Specified site number is not in the valid range for the registered pin map.
    // - INVALID_ARGUMENT:
    //   - Specified pin or relay is not present in the registered pin map resource.
    //   - Empty string specified for a pin or relay name.
    rpc QueryResourceAccessInformation(QueryResourceAccessInformationRequest) returns (QueryResourceAccessInformationResponse);
}

// Pin map resource type.
message PinMap {
    // Output only. The resource id of the registered pin map resource.
    string pin_map_id = 1;
}

message CreatePinMapFromXmlRequest {
    // Required. The resource id of the pin map to register as a pin map resource.
    string pin_map_id = 1;

    // Required. A string representing contents of a pin map file.
    string pin_map_xml = 2;
}

message UpdatePinMapFromXmlRequest {
    // Required. The resource id of the pin map to be updated.
    string pin_map_id = 1;

    // Required. New pin map file content.
    string pin_map_xml = 2;
}

message GetPinMapRequest {
    // Required. The resource id of the registered pin map resource.
    string pin_map_id = 1;
}

message QueryPinsRequest {
    // Required. The resource id of the registered pin map resource.
    string pin_map_id = 1;

    // Optional. Filter pins by instrument type.
    // Pin maps have built in instrument definitions using the following NI driver based instrument type ids:
    //      "niDCPower"
    //      "niDigitalPattern"
    //      "niScope"
    //      "niDMM"
    //      "niDAQmx"
    //      "niFGen"
    // For custom instruments the user defined instrument type id is defined in the pin map file.
    string instrument_type_id = 2;
}

message QueryPinsResponse {
    // List of pins on the registered pin map resource. This list includes both DUT and System pins.
    repeated PinDefinition pins = 1;

    // List of pin groups on the registered pin map resource.
    // When an instrument type id filter is specified, a pin group will only be included
    // in the response if all pins in the pin group match the instrument type.
    repeated PinGroupDefinition pin_groups = 2;
}

message PinDefinition {
    // Name of the dut pin.
    string display_name = 1;

    // A boolean that indicates a System pin when 'true', or DUT pin when 'false'.
    bool is_system_pin = 2;
}

message PinGroupDefinition {
    // Name of the pin group.
    string display_name = 1;

    // List of other pins or pin groups within this pin group.
    repeated string pin_or_group_references = 2;

    // Distinct union of pins within this pin group, including those within nested pin groups.
    repeated string resolved_pins = 3;
}

message QueryRelaysRequest {
    // Required. The resource id of the registered pin map resource.
    string pin_map_id = 1;
}

message QueryRelaysResponse {
    // List of relays on the registered pin map resource. This list includes both Site relays and System relays.
    repeated RelayDefinition relays = 1;

    // List of relay groups on the registered pin map resource.
    repeated RelayGroupDefinition relay_groups = 2;
}

message RelayDefinition {
    // Name of the relay.
    string display_name = 1;

    // A boolean that indicates a System relay when 'true', or Site relay when 'false'.
    bool is_system_relay = 2;
}

message RelayGroupDefinition {
    // Name of the relay group.
    string display_name = 1;

    // List of other relays or relay groups within this relay group.
    repeated string relay_or_group_references = 2;

    // Distinct union of relays within this relay group, including those within nested relay groups.
    repeated string resolved_relays = 3;
}

message QueryResourceAccessInformationRequest {
    // Required. The resource id of the registered pin map resource.
    string pin_map_id = 1;

    // Optional. The list of sites for which to get instrument resource access information. If unspecified, get instrument resource information for all sites in the registered pin map resource.
    repeated int32 sites = 2;

    // Optional. The list of pins, pin groups, relays, or relay groups for which to get instrument resource access information. If unspecified, get instrument resource information for all pins and relays in the registered pin map resource.
    repeated string pin_or_relay_names = 3;

    // Optional. The instrument type for which to get instrument resource access information. If unspecified, get instrument resource information for all instrument types connected in the registered pin map resource.
    // Pin maps have built in instrument definitions using the following NI driver based instrument type ids:
    //      "niDCPower"
    //      "niDigitalPattern"
    //      "niScope"
    //      "niDMM"
    //      "niDAQmx"
    //      "niFGen"
    //      "niRelayDriver"
    // For custom instruments the user defined instrument type id is defined in the pin map file.
    string instrument_type_id = 4;
}

message QueryResourceAccessInformationResponse {
    // List of ResourceAccessInformation objects with instrument resource names and channels.
    repeated ResourceAccessInformation resource_access_information = 1;
}

message ResourceAccessInformation {
    // Name of the instrument resource.
    // This string is used for initializing the driver session.
    string resource_name = 1;

    // Channels on the instrument resource.
    // This string is used by various driver API methods such as Read, Fetch etc., and driver initialization for some instruments.
    // For a resource that represents a group of instruments or channels in the pin map, the channel list is a comma separated list of fully qualified channels in the format <instrument_name>/<channel>, e.g. "DCPower1/0, DCPower1/2, DCPower2/0".
    // For a resource that represents a single instrument in the pin map that is not part of a group, the channel list is a comma separated list of channels, e.g. "0, 1, 2".
    // For NI-Digital Pattern devices, the channel list is a comma separated list of pins in the format <site_number>/<pin>, e.g. "site0/PinA, site1/PinB".
    // For a resource that represents a relay driver, the channel list is a comma separated list of NISwitch relay names, e.g. "K0, K1, K2".
    string channel_list = 2;

    // The instrument type of the instrument resource.
    // Pin maps have built in instrument definitions using the following NI driver based instrument type ids:
    //      "niDCPower"
    //      "niDigitalPattern"
    //      "niScope"
    //      "niDMM"
    //      "niDAQmx"
    //      "niFGen"
    //      "niRelayDriver"
    // For custom instruments the user defined instrument type id is defined in the pin map file.
    string instrument_type_id = 3;

    // List of site and pin/relay mappings that correspond to each channel in the channel_list.
    // Each item contains a mapping corresponding to a channel in this instrument resource, in the order of the channel_list.
    repeated ChannelMapping channel_mappings = 4;
}

message ChannelMapping {
    // The pin or relay that is mapped to a channel.
    string pin_or_relay_name = 1;

    // The site on which the pin or relay is mapped to a channel.
    // For system pins/relays the site number is -1 since they do not belong to a specific site.
    int32 site = 2;

    // The channel to which the pin or relay is mapped on this site.
    string channel = 3;
}
