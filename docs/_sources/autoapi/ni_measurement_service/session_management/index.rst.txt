:py:mod:`ni_measurement_service.session_management`
===================================================

.. py:module:: ni_measurement_service.session_management

.. autoapi-nested-parse::

   Contains methods related to managing driver sessions.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurement_service.session_management.PinMapContext
   ni_measurement_service.session_management.SessionInformation
   ni_measurement_service.session_management.Reservation
   ni_measurement_service.session_management.Client




Attributes
~~~~~~~~~~

.. autoapisummary::

   ni_measurement_service.session_management.GRPC_SERVICE_INTERFACE_NAME
   ni_measurement_service.session_management.GRPC_SERVICE_CLASS
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NONE
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_DCPOWER
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_HSDIO
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_RFSA
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_RFMX
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_RFSG
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_RFPM
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_DMM
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_DIGITAL_PATTERN
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_SCOPE
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_FGEN
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_DAQMX
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_RELAY_DRIVER
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_MODEL_BASED_INSTRUMENT
   ni_measurement_service.session_management.INSTRUMENT_TYPE_NI_SWITCH_EXECUTIVE_VIRTUAL_DEVICE


.. py:data:: GRPC_SERVICE_INTERFACE_NAME
   :annotation: = ni.measurementlink.sessionmanagement.v1.SessionManagementService

   

.. py:data:: GRPC_SERVICE_CLASS
   :annotation: = ni.measurementlink.sessionmanagement.v1.SessionManagementService

   

.. py:data:: INSTRUMENT_TYPE_NONE
   :annotation: = 

   

.. py:data:: INSTRUMENT_TYPE_NI_DCPOWER
   :annotation: = niDCPower

   

.. py:data:: INSTRUMENT_TYPE_NI_HSDIO
   :annotation: = niHSDIO

   

.. py:data:: INSTRUMENT_TYPE_NI_RFSA
   :annotation: = niRFSA

   

.. py:data:: INSTRUMENT_TYPE_NI_RFMX
   :annotation: = niRFmx

   

.. py:data:: INSTRUMENT_TYPE_NI_RFSG
   :annotation: = niRFSG

   

.. py:data:: INSTRUMENT_TYPE_NI_RFPM
   :annotation: = niRFPM

   

.. py:data:: INSTRUMENT_TYPE_NI_DMM
   :annotation: = niDMM

   

.. py:data:: INSTRUMENT_TYPE_NI_DIGITAL_PATTERN
   :annotation: = niDigitalPattern

   

.. py:data:: INSTRUMENT_TYPE_NI_SCOPE
   :annotation: = niScope

   

.. py:data:: INSTRUMENT_TYPE_NI_FGEN
   :annotation: = niFGen

   

.. py:data:: INSTRUMENT_TYPE_NI_DAQMX
   :annotation: = niDAQmx

   

.. py:data:: INSTRUMENT_TYPE_NI_RELAY_DRIVER
   :annotation: = niRelayDriver

   

.. py:data:: INSTRUMENT_TYPE_NI_MODEL_BASED_INSTRUMENT
   :annotation: = niModelBasedInstrument

   

.. py:data:: INSTRUMENT_TYPE_NI_SWITCH_EXECUTIVE_VIRTUAL_DEVICE
   :annotation: = niSwitchExecutiveVirtualDevice

   

.. py:class:: PinMapContext

   Bases: :py:obj:`NamedTuple`

   Container for the pin map and sites.

   Attributes
   ----------
       pin_map_id (str): The resource id of the pin map in the Pin Map service that should be used
           for the call.

       sites (list): List of site numbers being used for the call. If None, use all sites in the
           pin map.


   .. py:attribute:: pin_map_id
      :annotation: :str

      

   .. py:attribute:: sites
      :annotation: :Optional[List[int]]

      


.. py:class:: SessionInformation

   Bases: :py:obj:`NamedTuple`

   Container for the session information.

   Attributes
   ----------
       session_name (str): Session identifier used to identify the session in the session
           management service, as well as in driver services such as grpc-device.

       resource_name (str): Resource name used to open this session in the driver.

       channel_list (str): Channel list used for driver initialization and measurement methods.
           This field is empty for any SessionInformation returned from
           Client.reserve_all_registered_sessions.

       instrument_type_id (str): Instrument type ID to identify which type of instrument the
           session represents. Pin maps have built in instrument definitions using the following
           NI driver based instrument type ids:
               "niDCPower"
               "niDigitalPattern"
               "niScope"
               "niDMM"
               "niDAQmx".
           For custom instruments the user defined instrument type id is defined in the pin map
           file.

       session_exists (bool): Indicates whether the session exists in the Session Manager. This
           indicates whether the session has been created.


   .. py:attribute:: session_name
      :annotation: :str

      

   .. py:attribute:: resource_name
      :annotation: :str

      

   .. py:attribute:: channel_list
      :annotation: :str

      

   .. py:attribute:: instrument_type_id
      :annotation: :str

      

   .. py:attribute:: session_exists
      :annotation: :bool

      


.. py:class:: Reservation(session_manager, session_info)

   Bases: :py:obj:`object`

   Manage session reservation.

   .. py:method:: __enter__()

      Context management protocol. Returns self.


   .. py:method:: __exit__(*exc)

      Context management protocol. Calls unreserve().


   .. py:method:: unreserve()

      Unreserve sessions.


   .. py:method:: session_info()

      Return session information.



.. py:class:: Client(*, grpc_channel)

   Bases: :py:obj:`object`

   Class that manages driver sessions.

   .. py:method:: reserve_sessions(context, pin_names = None, instrument_type_id = None, timeout = None)

      Reserve session(s).

      Reserve session(s) for the given pins, sites, and instrument type ID and returns the
      information needed to create or access the session.

      Args
      ----
          context (PinMapContext): Includes the pin map ID for the pin map in the Pin Map Service,
              as well as the list of sites for the measurement.

          pin_names (Iterable[str]): List of pin names or pin group names to use for the
              measurement. If unspecified, reserve sessions for all pins in the registered pin map
              resource.

          instrument_type_id (str): Instrument type ID for the measurement. If unspecified,
              reserve sessions for all instrument types connected in the registered pin map
              resource. Pin maps have built in instrument definitions using the following NI
              driver based instrument type ids:
                  "niDCPower"
                  "niDigitalPattern"
                  "niScope"
                  "niDMM"
                  "niDAQmx".
              For custom instruments the user defined instrument type id is defined in the pin
              map file.

          timeout (float): Timeout in seconds. Allowed values,
              0 (non-blocking, fails immediately if resources cannot be reserved),
              -1 or negative (infinite timeout), or
              any positive numeric value (wait for that number of second).

      Returns
      -------
          Reservation: Context manager that can be used with a with-statement to unreserve the
          sessions.



   .. py:method:: register_sessions(session_info)

      Register the sessions with the Session Manager.

      Indicates that the sessions are open and will need to be closed later.

      Args:
      ----
          session_info (Iterable[SessionInformation]): Sessions to register with the session
          management service to track as the sessions are open.

      Raises
      ------
          Exception: If a session by the same name is already registered.



   .. py:method:: unregister_sessions(session_info)

      Unregisters the sessions from the Session Manager.

      Indicates that the sessions have been closed and will need to be reopened before they can be
      used again.

      Args:
      ----
          session_info (Iterable[SessionInformation]): Sessions to be registered.



   .. py:method:: reserve_all_registered_sessions(timeout = None)

      Reserves and gets all sessions currently registered in the Session Manager.

      Args
      ----
          timeout (float): Timeout in seconds. Allowed values,
              0 (non-blocking, fails immediately if resources cannot be reserved),
              -1 or negative (infinite timeout), or
              any positive numeric value (wait for that number of second).

      Returns
      -------
          Reservation: Context manager that can be used with a with-statement to unreserve the
          sessions.




