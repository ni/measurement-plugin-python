:py:mod:`ni_measurement_service._internal.stubs.DiscoveryServices_pb2_grpc`
===========================================================================

.. py:module:: ni_measurement_service._internal.stubs.DiscoveryServices_pb2_grpc

.. autoapi-nested-parse::

   Client and server classes corresponding to protobuf-defined services.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurement_service._internal.stubs.DiscoveryServices_pb2_grpc.RegistryServiceStub
   ni_measurement_service._internal.stubs.DiscoveryServices_pb2_grpc.RegistryServiceServicer
   ni_measurement_service._internal.stubs.DiscoveryServices_pb2_grpc.RegistryService



Functions
~~~~~~~~~

.. autoapisummary::

   ni_measurement_service._internal.stubs.DiscoveryServices_pb2_grpc.add_RegistryServiceServicer_to_server



.. py:class:: RegistryServiceStub(channel)

   Bases: :py:obj:`object`

   Service registry for the Measurement Services System. Measurement Services uses Client
   Used to:
   Register Services - When a service starts up it can dynamically register
   Service Enumeration - Find all classes of a service which implement a specific
   service interface
   Service Path Resolution - Used to find optimal instances and network paths to
   a specific service


.. py:class:: RegistryServiceServicer

   Bases: :py:obj:`object`

   Service registry for the Measurement Services System. Measurement Services uses Client
   Used to:
   Register Services - When a service starts up it can dynamically register
   Service Enumeration - Find all classes of a service which implement a specific
   service interface
   Service Path Resolution - Used to find optimal instances and network paths to
   a specific service

   .. py:method:: RegisterService(self, request, context)

      Registers a service instance with the registry


   .. py:method:: UnregisterService(self, request, context)

      Unregisters a service instance with the registry


   .. py:method:: EnumerateServices(self, request, context)

      Enumerate all services which implement a specific service interface
      This is useful for plugin type systems where the possible services are not know ahead of time.


   .. py:method:: ResolveService(self, request, context)

      Given a specific service class this will find the best service implementation which
      best optimizes communication performance. Factors such as data path and service load
      will be taken into account


   .. py:method:: ResolveMonikerEndpoint(self, request, context)

      Given a specific moniker endpoint this will find the best data path to use to
      optimize the performance of communcation.  For example if there are multiple
      network paths (1Gb public IP, and 10Gb link-local) this will resolve to the path
      which will give the best performance.



.. py:function:: add_RegistryServiceServicer_to_server(servicer, server)


.. py:class:: RegistryService

   Bases: :py:obj:`object`

   Service registry for the Measurement Services System. Measurement Services uses Client
   Used to:
   Register Services - When a service starts up it can dynamically register
   Service Enumeration - Find all classes of a service which implement a specific
   service interface
   Service Path Resolution - Used to find optimal instances and network paths to
   a specific service

   .. py:method:: RegisterService(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: UnregisterService(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: EnumerateServices(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: ResolveService(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: ResolveMonikerEndpoint(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:



