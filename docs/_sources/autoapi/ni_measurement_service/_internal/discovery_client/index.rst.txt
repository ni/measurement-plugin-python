:py:mod:`ni_measurement_service._internal.discovery_client`
===========================================================

.. py:module:: ni_measurement_service._internal.discovery_client

.. autoapi-nested-parse::

   Contains API to register and un-register measurement service with discovery service.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurement_service._internal.discovery_client.ServiceLocation
   ni_measurement_service._internal.discovery_client.DiscoveryClient




.. py:class:: ServiceLocation

   Bases: :py:obj:`NamedTuple`

   Represents the location of a service.

   .. py:attribute:: location
      :annotation: :str

      

   .. py:attribute:: insecure_port
      :annotation: :str

      

   .. py:attribute:: ssl_authenticated_port
      :annotation: :str

      

   .. py:method:: insecure_address()
      :property:

      Get the service's insecure address in the format host:port.


   .. py:method:: ssl_authenticated_address()
      :property:

      Get the service's SSL-authenticated address in the format host:port.



.. py:class:: DiscoveryClient(stub = None)

   Class that contains APIs need to interact with discovery service.

   Attributes
   ----------
       stub (DiscoveryServiceStub): The gRPC stub used to interact with the discovery
       service.

       registration_id(string): The ID from discovery service upon successful registration.


   .. py:method:: stub()
      :property:

      Get the gRPC stub used to interact with the discovery service.


   .. py:method:: register_measurement_service(service_port, service_info, measurement_info)

      Register the measurement service with the discovery service.

      Args:
      ----
          service_port (str): Port Number of the measurement service.

          service_info (ServiceInfo): Service Info.

          display_name (str): Display name of the service.

      Returns
      -------
          bool: Boolean to represent if the registration is successful.



   .. py:method:: unregister_service()

      Un-registers the measurement service from the discovery service.

      Should be called before the service is closed.

      Returns
      -------
          bool: Boolean to represent if the un-registration is successful.



   .. py:method:: resolve_service(provided_interface, service_class = '')

      Resolve the location of a service.

      Given a description of a service, returns information that can be used to establish
      communication with that service. If necessary, the service will be started by the
      discovery service if it has not already been started.

      Args:
      ----
          provided_interface: The gRPC Full Name of the service.
          service_class: The service "class" that should be matched. If the value is not
              specified and there is more than one matching service registered, an error
              is returned.

      Returns
      -------
          A ServiceLocation location object that represents the location of a service.




