:py:mod:`ni_measurement_service`
================================

.. py:module:: ni_measurement_service

.. autoapi-nested-parse::

   National Instruments Framework for hosting Python Measurement Services.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   measurement/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurement_service.DataType
   ni_measurement_service.MeasurementInfo
   ni_measurement_service.ServiceInfo
   ni_measurement_service.UIFileType
   ni_measurement_service.MeasurementService




.. py:class:: DataType

   Bases: :py:obj:`enum.Enum`

   Enum that represents the supported data types.

   .. py:attribute:: Int32
      

      

   .. py:attribute:: Int64
      

      

   .. py:attribute:: UInt32
      

      

   .. py:attribute:: UInt64
      

      

   .. py:attribute:: Float
      

      

   .. py:attribute:: Double
      

      

   .. py:attribute:: Boolean
      

      

   .. py:attribute:: String
      

      

   .. py:attribute:: DoubleArray1D
      

      


.. py:class:: MeasurementInfo

   Bases: :py:obj:`NamedTuple`

   Class that represents the measurement information.

   Attributes
   ----------
       display_name (str): The display name of the measurement.

       version (str): The version of the measurement.

       measurement_type (str): Type of the measurement.

       product_type (str): Type of product related to the measurement.

       ui_file_path (str): Path of the UI file linked to the measurement.

       ui_file_type (UIFileType): Type of the linked UI file.


   .. py:attribute:: display_name
      :annotation: :str

      

   .. py:attribute:: version
      :annotation: :str

      

   .. py:attribute:: measurement_type
      :annotation: :str

      

   .. py:attribute:: product_type
      :annotation: :str

      

   .. py:attribute:: ui_file_path
      :annotation: :str

      

   .. py:attribute:: ui_file_type
      :annotation: :UIFileType

      


.. py:class:: ServiceInfo

   Bases: :py:obj:`NamedTuple`

   Class the represents the service information.

   Attributes
   ----------
       service_class (str): Service class that the measurement belongs to.
       Measurements under same service class expected to perform same logic.
       For e.g., different version of measurement can come under same service class.

       service_id (str): Unique service of the measurement. Should be an Unique GUID.

       description_url (str): Description URL of the measurement.


   .. py:attribute:: service_class
      :annotation: :str

      

   .. py:attribute:: service_id
      :annotation: :str

      

   .. py:attribute:: description_url
      :annotation: :str

      


.. py:class:: UIFileType

   Bases: :py:obj:`enum.Enum`

   Enum that represents the supported UI Types.

   .. py:attribute:: ScreenFile
      :annotation: = ni_scr://

      

   .. py:attribute:: LabVIEW
      :annotation: = ni_vi://

      


.. py:class:: MeasurementService(measurement_info, service_info)

   Class the supports registering and hosting a python function as a gRPC service.

   Attributes
   ----------
       measurement_info (info.MeasurementInfo): Measurement info

       service_info(info.ServiceInfo) : Service Info

       configuration_parameter_list (List): List of configuration parameters.

       output_parameter_list (list): List of output parameters.

       measure_function (Callable): Registered measurement function.


   .. py:method:: register_measurement(self, measurement_function)

      Register the function as the measurement. Recommended to use as a decorator.

      Args
      ----
          func (Callable): Any Python Function.

      Returns
      -------
          Callable: Python Function.



   .. py:method:: configuration(self, display_name, type, default_value)

      Add configuration parameter info for a measurement.Recommended to use as a decorator.

      Args
      ----
          display_name (str): Display name of the configuration.

          type (DataType): Data type of the configuration.

          default_value (Any): Default value of the configuration.

      Returns
      -------
          Callable: Callable that takes in Any Python Function
          and returns the same python function.



   .. py:method:: output(self, display_name, type)

      Add output parameter info for a measurement.Recommended to use as a decorator.

      Args
      ----
          display_name (str): Display name of the output.

          type (DataType): Data type of the output.

      Returns
      -------
          Callable: Callable that takes in Any Python Function and
          returns the same python function.



   .. py:method:: host_service(self)

      Host the registered measurement method as gRPC measurement service.

      Raises
      ------
          Exception: If register measurement methods not available.



   .. py:method:: close_service(self)

      Close the Service after un-registering with discovery service and cleanups.



