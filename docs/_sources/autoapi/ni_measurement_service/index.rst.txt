:py:mod:`ni_measurement_service`
================================

.. py:module:: ni_measurement_service

.. autoapi-nested-parse::

   MeasurementLink Support for Python.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   measurement/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   session_management/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurement_service.DataType
   ni_measurement_service.MeasurementInfo
   ni_measurement_service.ServiceInfo
   ni_measurement_service.MeasurementService




.. py:class:: DataType

   Bases: :py:obj:`enum.Enum`

   Enum that represents the supported data types.

   .. py:attribute:: Int32
      

      

   .. py:attribute:: Int64
      

      

   .. py:attribute:: UInt32
      

      

   .. py:attribute:: UInt64
      

      

   .. py:attribute:: Float
      

      

   .. py:attribute:: Double
      

      

   .. py:attribute:: Boolean
      

      

   .. py:attribute:: String
      

      

   .. py:attribute:: Pin
      

      

   .. py:attribute:: Int32Array1D
      

      

   .. py:attribute:: Int64Array1D
      

      

   .. py:attribute:: UInt32Array1D
      

      

   .. py:attribute:: UInt64Array1D
      

      

   .. py:attribute:: FloatArray1D
      

      

   .. py:attribute:: DoubleArray1D
      

      

   .. py:attribute:: BooleanArray1D
      

      

   .. py:attribute:: StringArray1D
      

      

   .. py:attribute:: PinArray1D
      

      


.. py:class:: MeasurementInfo

   Bases: :py:obj:`NamedTuple`

   Class that represents the measurement information.

   Attributes
   ----------
       display_name (str): The measurement display name for client to display to user.

       version (str): The measurement version that helps to
       maintain versions of a measurement in future.

       ui_file_paths (list): Absolute paths of the UI file(s) linked to the measurement.


   .. py:attribute:: display_name
      :annotation: :str

      

   .. py:attribute:: version
      :annotation: :str

      

   .. py:attribute:: ui_file_paths
      :annotation: :List[pathlib.Path]

      


.. py:class:: ServiceInfo

   Bases: :py:obj:`NamedTuple`

   Class the represents the service information.

   Attributes
   ----------
       service_class (str): Service class that the measurement belongs to.
       Measurements under same service class expected to perform same logic.
       For e.g., different version of measurement can come under same service class.

       description_url (str): Description URL of the measurement.


   .. py:attribute:: service_class
      :annotation: :str

      

   .. py:attribute:: description_url
      :annotation: :str

      


.. py:class:: MeasurementService(measurement_info, service_info)

   Class that supports registering and hosting a python function as a gRPC service.

   Attributes
   ----------
       measurement_info (info.MeasurementInfo): Measurement info

       service_info(info.ServiceInfo) : Service Info

       configuration_parameter_list (List): List of configuration parameters.

       output_parameter_list (list): List of output parameters.

       measure_function (Callable): Registered measurement function.

       context (MeasurementContext): Accessor for context-local state.

       discovery_client (DiscoveryClient): Client for accessing the MeasurementLink discovery
           service.

       channel_pool (GrpcChannelPool): Pool of gRPC channels used by the service.


   .. py:method:: register_measurement(measurement_function)

      Register a function as the measurement function for a measurement service.

      To declare a measurement function, use this idiom:

      ```
      @measurement_service.register_measurement
      @measurement_service.configuration("Configuration 1", ...)
      @measurement_service.configuration("Configuration 2", ...)
      @measurement_service.output("Output 1", ...)
      @measurement_service.output("Output 2", ...)
      def measure(configuration1, configuration2):
          ...
          return (output1, output2)
      ```

      See also: :func:`.configuration`, :func:`.output`


   .. py:method:: configuration(display_name, type, default_value, *, instrument_type = '')

      Add a configuration parameter to a measurement function.

      This decorator maps the measurement service's configuration parameters
      to Python positional parameters. To add multiple configuration parameters
      to the same measurement function, use this decorator multiple times.
      The order of decorator calls must match the order of positional parameters.

      See also: :func:`.register_measurement`

      Args
      ----
          display_name (str): Display name of the configuration.

          type (DataType): Data type of the configuration.

          default_value (Any): Default value of the configuration.

          instrument_type (str): Optional.
          Instrument type to be used to show instrument specific values to the configurations.
          This is only supported when configuration type is DataType.Pin.

      Returns
      -------
          Callable: Callable that takes in Any Python Function
          and returns the same python function.



   .. py:method:: output(display_name, type)

      Add a output parameter to a measurement function.

      This decorator maps the measurement service's output parameters to
      the elements of the tuple returned by the measurement function.
      To add multiple output parameters to the same measurement function,
      use this decorator multiple times.
      The order of decorator calls must match the order of elements
      returned by the measurement fuction.

      See also: :func:`.register_measurement`

      Args
      ----
          display_name (str): Display name of the output.

          type (DataType): Data type of the output.

      Returns
      -------
          Callable: Callable that takes in Any Python Function and
          returns the same python function.



   .. py:method:: host_service()

      Host the registered measurement method as gRPC measurement service.

      Returns
      -------
          MeasurementService: Context manager that can be used with a with-statement to close
          the service.

      Raises
      ------
          Exception: If register measurement methods not available.



   .. py:method:: close_service()

      Close the Service after un-registering with discovery service and cleanups.


   .. py:method:: __enter__()

      Enter the runtime context related to the measurement service.


   .. py:method:: __exit__(exc_type, exc_value, traceback)

      Exit the runtime context related to the measurement service.


   .. py:method:: get_channel(provided_interface, service_class = '')

      Return gRPC channel to specified service.

      Args
      ----
          provided_interface (str): The gRPC Full Name of the service.

          service_class (str): The service "class" that should be matched.

      Returns
      -------
          grpc.Channel: A channel to the gRPC service.

      Raises
      ------
          Exception: If service_class is not specified and there is more than one matching service
              registered.




