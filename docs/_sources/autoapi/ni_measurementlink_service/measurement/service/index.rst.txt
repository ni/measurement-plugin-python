:py:mod:`ni_measurementlink_service.measurement.service`
========================================================

.. py:module:: ni_measurementlink_service.measurement.service

.. autoapi-nested-parse::

   Framework to host measurement service.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurementlink_service.measurement.service.MeasurementContext
   ni_measurementlink_service.measurement.service.MeasurementService




Attributes
~~~~~~~~~~

.. autoapisummary::

   ni_measurementlink_service.measurement.service.SupportedEnumType


.. py:data:: SupportedEnumType
   

   

.. py:class:: MeasurementContext

   Proxy for the Measurement Service's context-local state.

   .. py:method:: grpc_context()
      :property:

      Get the context for the RPC.


   .. py:method:: pin_map_context()
      :property:

      Get the pin map context for the RPC.


   .. py:method:: add_cancel_callback(cancel_callback)

      Add a callback which is invoked when the RPC is canceled.


   .. py:method:: cancel()

      Cancel the RPC.


   .. py:method:: time_remaining()
      :property:

      Get the time remaining for the RPC.


   .. py:method:: abort(code, details)

      Aborts the RPC.



.. py:class:: MeasurementService(service_config_path, version, ui_file_paths, service_class = None)

   Class that supports registering and hosting a python function as a gRPC service.

   Attributes
   ----------
       measurement_info (info.MeasurementInfo): Measurement info

       service_info(info.ServiceInfo) : Service Info

       configuration_parameter_list (List): List of configuration parameters.

       output_parameter_list (list): List of output parameters.

       measure_function (Callable): Registered measurement function.

       context (MeasurementContext): Accessor for context-local state.

       discovery_client (DiscoveryClient): Client for accessing the MeasurementLink discovery
           service.

       channel_pool (GrpcChannelPool): Pool of gRPC channels used by the service.


   .. py:method:: register_measurement(measurement_function)

      Register a function as the measurement function for a measurement service.

      To declare a measurement function, use this idiom:

      ```
      @measurement_service.register_measurement
      @measurement_service.configuration("Configuration 1", ...)
      @measurement_service.configuration("Configuration 2", ...)
      @measurement_service.output("Output 1", ...)
      @measurement_service.output("Output 2", ...)
      def measure(configuration1, configuration2):
          ...
          return (output1, output2)
      ```

      See also: :func:`.configuration`, :func:`.output`


   .. py:method:: configuration(display_name, type, default_value, *, instrument_type = '', enum_type = None)

      Add a configuration parameter to a measurement function.

      This decorator maps the measurement service's configuration parameters
      to Python positional parameters. To add multiple configuration parameters
      to the same measurement function, use this decorator multiple times.
      The order of decorator calls must match the order of positional parameters.

      See also: :func:`.register_measurement`

      Args
      ----
          display_name (str): Display name of the configuration.

          type (DataType): Data type of the configuration.

          default_value (Any): Default value of the configuration.

          instrument_type (Optional[str]):
          Filter pins by instrument type. This is only supported when configuration type
          is DataType.Pin. Pin maps have built in instrument definitions using the
          NI driver based instrument type ids. These can be found as constants
          in `nims.session_management`. For example, for an NI DCPower instrument
          the instrument type is `nims.session_management.INSTRUMENT_TYPE_NI_DCPOWER`.
          For custom instruments the user defined instrument type id is defined in the
          pin map file.

          enum_type (Optional[SupportedEnumType]):
          Defines the enum type associated with this configuration parameter. This is only
          supported when configuration type is DataType.Enum or DataType.EnumArray1D.

      Returns
      -------
          Callable: Callable that takes in Any Python Function
          and returns the same python function.



   .. py:method:: output(display_name, type, *, enum_type = None)

      Add an output parameter to a measurement function.

      This decorator maps the measurement service's output parameters to
      the elements of the tuple returned by the measurement function.
      To add multiple output parameters to the same measurement function,
      use this decorator multiple times.
      The order of decorator calls must match the order of elements
      returned by the measurement function.

      See also: :func:`.register_measurement`

      Args
      ----
          display_name (str): Display name of the output.

          type (DataType): Data type of the output.

          enum_type (Optional[SupportedEnumType]:
          Defines the enum type associated with this configuration parameter. This is only
          supported when configuration type is DataType.Enum or DataType.EnumArray1D.

      Returns
      -------
          Callable: Callable that takes in Any Python Function and
          returns the same python function.



   .. py:method:: host_service()

      Host the registered measurement method as gRPC measurement service.

      Returns
      -------
          MeasurementService: Context manager that can be used with a with-statement to close
          the service.

      Raises
      ------
          Exception: If register measurement methods not available.



   .. py:method:: close_service()

      Close the Service after un-registering with discovery service and cleanups.


   .. py:method:: __enter__()

      Enter the runtime context related to the measurement service.


   .. py:method:: __exit__(exc_type, exc_val, traceback)

      Exit the runtime context related to the measurement service.


   .. py:method:: get_channel(provided_interface, service_class = '')

      Return gRPC channel to specified service.

      Args
      ----
          provided_interface (str): The gRPC Full Name of the service.

          service_class (str): The service "class" that should be matched.

      Returns
      -------
          grpc.Channel: A channel to the gRPC service.

      Raises
      ------
          Exception: If service_class is not specified and there is more than one matching service
              registered.




