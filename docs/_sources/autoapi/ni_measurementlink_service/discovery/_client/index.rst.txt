:orphan:

:py:mod:`ni_measurementlink_service.discovery._client`
======================================================

.. py:module:: ni_measurementlink_service.discovery._client

.. autoapi-nested-parse::

   Client for accessing the MeasurementLink discovery service.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurementlink_service.discovery._client.DiscoveryClient




.. py:class:: DiscoveryClient(stub = None, *, grpc_channel_pool = None)


   Client for accessing the MeasurementLink discovery service.

   .. py:property:: registration_id
      :type: str

      "The ID from discovery service upon successful registration.

   .. py:property:: stub
      :type: ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc.DiscoveryServiceStub

      Get the gRPC stub used to interact with the discovery service.

   .. py:method:: register_measurement_service(service_port, service_info, measurement_info)

      Register the measurement service with the discovery service.

      :param service_port: The port number of the service.
      :param service_info: Information describing the service.
      :param measurement_info: Information describing the measurement.

      :returns: Boolean indicating whether the service was successfully registered.


   .. py:method:: register_service(service_info, service_location)

      Register the specified service with the discovery service.

      :param service_info: Information describing the service.
      :param service_location: The location of the service on the network.

      :returns: ID that can be used to unregister the service.


   .. py:method:: unregister_service(registration_id = '')

      Unregisters the specified service from the discovery service.

      This method should be called before the service exits.

      :param registration_id: The registration ID returned from register_service.
                              This argument should be omitted after calling the deprecated
                              register_measurement_service method.

      :returns: Boolean indicating whether the service was unregistered.


   .. py:method:: resolve_service(provided_interface, service_class = '')

      Resolve the location of a service.

      Given a description of a service, returns information that can be used to establish
      communication with that service. If necessary, the service will be started by the
      discovery service if it has not already been started.

      :param provided_interface: The gRPC full name of the service.
      :param service_class: The service "class" that should be matched. If the value is not
                            specified and there is more than one matching service registered, an error
                            is returned.

      :returns: The service location.



