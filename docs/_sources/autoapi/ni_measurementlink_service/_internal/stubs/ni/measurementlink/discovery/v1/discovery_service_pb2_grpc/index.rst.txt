:py:mod:`ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc`
===============================================================================================================

.. py:module:: ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc

.. autoapi-nested-parse::

   Client and server classes corresponding to protobuf-defined services.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc.DiscoveryServiceStub
   ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc.DiscoveryServiceServicer
   ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc.DiscoveryService



Functions
~~~~~~~~~

.. autoapisummary::

   ni_measurementlink_service._internal.stubs.ni.measurementlink.discovery.v1.discovery_service_pb2_grpc.add_DiscoveryServiceServicer_to_server



.. py:class:: DiscoveryServiceStub(channel)

   Bases: :py:obj:`object`

   The service used as a registry for other services. This service can be used to discover
   and activate other services present in the system.


.. py:class:: DiscoveryServiceServicer

   Bases: :py:obj:`object`

   The service used as a registry for other services. This service can be used to discover
   and activate other services present in the system.

   .. py:method:: RegisterService(request, context)

      Registers a service instance with the discovery service.
      Status Codes for errors:
      - INVALID_ARGUMENT:
      - ServiceDescriptor.display_name is empty
      - ServiceDescriptor.provided_interfaces is empty
      - ServiceDescriptor.service_class is empty
      - ServiceLocation.location is empty
      - Both ServiceLocation.insecure_port and ServiceLocation.ssl_authenticated_port are empty
      - Either ServiceLocation.insecure_port or ServiceLocation.ssl_authenticated_port contain an invalid port number


   .. py:method:: UnregisterService(request, context)

      Unregisters a service instance with the discovery service.



   .. py:method:: EnumerateServices(request, context)

      Enumerate all services which implement a specific service interface.
      This is useful for plugin type systems where the possible services are not known ahead of time.


   .. py:method:: ResolveService(request, context)

      Given a description of a service, returns information that can be used to establish communication
      with that service. If necessary, the service will be started by the discovery service if it has not
      already been started. Activation of the service is accomplished through use of a .serviceconfig file
      which includes information describing the service. Services that register a .serviceconfig file must
      call RegisterService when their service is started or this call will never complete successfully when
      the discovery service attempts to start it.
      Status Codes for errors:
      - INVALID_ARGUMENT: provided_interfaces is empty
      - NOT_FOUND: No service matching the resolve request was found
      - FAILED_PRECONDITION: More than one service matching the resolve request was found



.. py:function:: add_DiscoveryServiceServicer_to_server(servicer, server)


.. py:class:: DiscoveryService

   Bases: :py:obj:`object`

   The service used as a registry for other services. This service can be used to discover
   and activate other services present in the system.

   .. py:method:: RegisterService(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: UnregisterService(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: EnumerateServices(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:


   .. py:method:: ResolveService(request, target, options=(), channel_credentials=None, call_credentials=None, insecure=False, compression=None, wait_for_ready=None, timeout=None, metadata=None)
      :staticmethod:



