:orphan:

:py:mod:`ni_measurementlink_service.session_management._reservation`
====================================================================

.. py:module:: ni_measurementlink_service.session_management._reservation

.. autoapi-nested-parse::

   Session management reservation classes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ni_measurementlink_service.session_management._reservation.BaseReservation
   ni_measurementlink_service.session_management._reservation.SingleSessionReservation
   ni_measurementlink_service.session_management._reservation.MultiSessionReservation




.. py:class:: BaseReservation(session_manager, session_info, reserved_pin_or_relay_names = None, reserved_sites = None)


   Bases: :py:obj:`abc.ABC`

   Manages session reservation.

   .. py:method:: __enter__()

      Context management protocol. Returns self.


   .. py:method:: __exit__(exc_type, exc_val, traceback)

      Context management protocol. Calls unreserve().


   .. py:method:: unreserve()

      Unreserve sessions.


   .. py:method:: initialize_session(session_constructor, instrument_type_id)

      Initialize a single instrument session.

      This is a generic method that supports any instrument driver.

      :param session_constructor: A function that constructs sessions based on
                                  session information.
      :param instrument_type_id: Instrument type ID for the session.

                                 For custom instruments, use the instrument type id defined in
                                 the pin map file.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If the instrument type ID is empty, no reserved sessions
          match the instrument type ID, or too many reserved sessions
          match the instrument type ID.


   .. py:method:: initialize_sessions(session_constructor, instrument_type_id)

      Initialize multiple instrument sessions.

      This is a generic method that supports any instrument driver.

      :param session_constructor: A function that constructs sessions based on
                                  session information.
      :param instrument_type_id: Instrument type ID for the session.

                                 For custom instruments, use the instrument type id defined in
                                 the pin map file.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If the instrument type ID is empty or no reserved
          sessions matched the instrument type ID.


   .. py:method:: get_connection(session_type, pin_or_relay_name = None, site = None, instrument_type_id = None)

      Get the connection matching the specified criteria.

      This is a generic method that supports any instrument driver.

      :param session_type: The session type.
      :param pin_or_relay_name: The pin or relay name to match against. If not
                                specified, the pin or relay name is ignored when matching
                                connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.
      :param instrument_type_id: The instrument type ID to match against. If not
                                 specified, the instrument type ID is ignored when matching
                                 connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_connections(session_type, pin_or_relay_names = None, sites = None, instrument_type_id = None)

      Get all connections matching the specified criteria.

      This is a generic method that supports any instrument driver.

      :param session_type: The expected session type.
      :param pin_or_relay_names: The pin or relay name(s) to match against. If
                                 not specified, the pin or relay name is ignored when matching
                                 connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.
      :param instrument_type_id: The instrument type ID to match against. If not
                                 specified, the instrument type ID is ignored when matching
                                 connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: create_nidaqmx_task(initialization_behavior = SessionInitializationBehavior.AUTO)

      Create a single NI-DAQmx task.

      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will create a new task or attach to an existing task.

      :returns: A context manager that yields a session information object. The task
                object is available via the ``session`` field.

      :raises ValueError: If no NI-DAQmx tasks are reserved or too many
          NI-DAQmx tasks are reserved.

      .. note::

         If the ``session_exists`` field is ``False``, the returned task is
         empty and the caller is expected to add channels to it.

      .. seealso:: For more details, see :py:class:`nidaqmx.Task`.


   .. py:method:: create_nidaqmx_tasks(initialization_behavior = SessionInitializationBehavior.AUTO)

      Create multiple NI-DAQmx tasks.

      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will create a new task or attach to an existing task.

      :returns: A context manager that yields a sequence of session information
                objects. The task objects are available via the ``session`` field.

      :raises ValueError: If no NI-DAQmx tasks are reserved.

      .. note::

         If the ``session_exists`` field is ``False``, the returned tasks are
         empty and the caller is expected to add channels to them.

      .. seealso:: For more details, see :py:class:`nidaqmx.Task`.


   .. py:method:: get_nidaqmx_connection(pin_name = None, site = None)

      Get the NI-DAQmx connection matching the specified criteria.

      :param pin_name: The pin name to match against. If not specified, the pin
                       name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_nidaqmx_connections(pin_names = None, sites = None)

      Get all NI-DAQmx connections matching the specified criteria.

      :param pin_names: The pin name(s) to match against. If not specified, the
                        pin name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: initialize_nidcpower_session(reset = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize a single NI-DCPower instrument session.

      :param reset: Specifies whether to reset channel(s) during the
                    initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIDCPOWER_SIMULATE``, ``NIDCPOWER_BOARD_TYPE``, and
                      ``NIDCPOWER_MODEL`` in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If no NI-DCPower sessions are reserved or too many
          NI-DCPower sessions are reserved.

      .. seealso:: For more details, see :py:class:`nidcpower.Session`.


   .. py:method:: initialize_nidcpower_sessions(reset = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize multiple NI-DCPower instrument sessions.

      :param reset: Specifies whether to reset channel(s) during the
                    initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIDCPOWER_SIMULATE``, ``NIDCPOWER_BOARD_TYPE``, and
                      ``NIDCPOWER_MODEL`` in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If no NI-DCPower sessions are reserved.

      .. seealso:: For more details, see :py:class:`nidcpower.Session`.


   .. py:method:: get_nidcpower_connection(pin_name = None, site = None)

      Get the NI-DCPower connection matching the specified criteria.

      :param pin_name: The pin name to match against. If not specified, the pin
                       name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_nidcpower_connections(pin_names = None, sites = None)

      Get all NI-DCPower connections matching the specified criteria.

      :param pin_names: The pin name(s) to match against. If not specified, the
                        pin name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: initialize_nidigital_session(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize a single NI-Digital Pattern instrument session.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIDIGITAL_SIMULATE``, ``NIDIGITAL_BOARD_TYPE``, and
                      ``NIDIGITAL_MODEL`` in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If no NI-Digital sessions are reserved or too many
          NI-Digital sessions are reserved.

      .. seealso:: For more details, see :py:class:`nidigital.Session`.


   .. py:method:: initialize_nidigital_sessions(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize multiple NI-Digital Pattern instrument sessions.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIDIGITAL_SIMULATE``, ``NIDIGITAL_BOARD_TYPE``, and
                      ``NIDIGITAL_MODEL`` in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If no NI-Digital sessions are reserved.

      .. seealso:: For more details, see :py:class:`nidigital.Session`.


   .. py:method:: get_nidigital_connection(pin_name = None, site = None)

      Get the NI-Digital Pattern connection matching the specified criteria.

      :param pin_name: The pin name to match against. If not specified, the pin
                       name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_nidigital_connections(pin_names = None, sites = None)

      Get all NI-Digital Pattern connections matching the specified criteria.

      :param pin_names: The pin name(s) to match against. If not specified, the
                        pin name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: initialize_nidmm_session(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize a single NI-DMM instrument session.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIDMM_SIMULATE``, ``NIDMM_BOARD_TYPE``, and ``NIDMM_MODEL`` in
                      the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If no NI-DMM sessions are reserved or too many
          NI-DMM sessions are reserved.

      .. seealso:: For more details, see :py:class:`nidmm.Session`.


   .. py:method:: initialize_nidmm_sessions(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize multiple NI-DMM instrument sessions.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIDMM_SIMULATE``, ``NIDMM_BOARD_TYPE``, and ``NIDMM_MODEL`` in
                      the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If no NI-DMM sessions are reserved.

      .. seealso:: For more details, see :py:class:`nidmm.Session`.


   .. py:method:: get_nidmm_connection(pin_name = None, site = None)

      Get the NI-DMM connection matching the specified criteria.

      :param pin_name: The pin name to match against. If not specified, the pin
                       name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_nidmm_connections(pin_names = None, sites = None)

      Get all NI-DMM connections matching the specified criteria.

      :param pin_names: The pin name(s) to match against. If not specified, the
                        pin name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: initialize_nifgen_session(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize a single NI-FGEN instrument session.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIFGEN_SIMULATE``, ``NIFGEN_BOARD_TYPE``, and ``NIFGEN_MODEL``
                      in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If no NI-FGEN sessions are reserved or too many NI-FGEN
          sessions are reserved.

      .. seealso:: For more details, see :py:class:`nifgen.Session`.


   .. py:method:: initialize_nifgen_sessions(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize multiple NI-FGEN instrument sessions.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NIFGEN_SIMULATE``, ``NIFGEN_BOARD_TYPE``, and ``NIFGEN_MODEL``
                      in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If no NI-FGEN sessions are reserved.

      .. seealso:: For more details, see :py:class:`nifgen.Session`.


   .. py:method:: get_nifgen_connection(pin_name = None, site = None)

      Get the NI-FGEN connection matching the specified criteria.

      :param pin_name: The pin name to match against. If not specified, the pin
                       name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_nifgen_connections(pin_names = None, sites = None)

      Get all NI-FGEN connections matching the specified criteria.

      :param pin_names: The pin name(s) to match against. If not specified, the
                        pin name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: initialize_niscope_session(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize a single NI-SCOPE instrument session.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NISCOPE_SIMULATE``, ``NISCOPE_BOARD_TYPE``, and
                      ``NISCOPE_MODEL`` in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If no NI-SCOPE sessions are reserved or too many
          NI-SCOPE sessions are reserved.

      .. seealso:: For more details, see :py:class:`niscope.Session`.


   .. py:method:: initialize_niscope_sessions(reset_device = False, options = None, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize multiple NI-SCOPE instrument sessions.

      :param reset_device: Specifies whether to reset the instrument during the
                           initialization procedure.
      :param options: Specifies the initial value of certain properties for the
                      session. If this argument is not specified, the default value is
                      an empty dict, which you may override by specifying
                      ``NISCOPE_SIMULATE``, ``NISCOPE_BOARD_TYPE``, and
                      ``NISCOPE_MODEL`` in the configuration file (``.env``).
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If no NI-SCOPE sessions are reserved.

      .. seealso:: For more details, see :py:class:`niscope.Session`.


   .. py:method:: get_niscope_connection(pin_name = None, site = None)

      Get the NI-SCOPE connection matching the specified criteria.

      :param pin_name: The pin name to match against. If not specified, the pin
                       name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_niscope_connections(pin_names = None, sites = None)

      Get all NI-SCOPE connections matching the specified criteria.

      :param pin_names: The pin name(s) to match against. If not specified, the
                        pin name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.


   .. py:method:: initialize_niswitch_session(topology = None, simulate = None, reset_device = False, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize a single NI-SWITCH relay driver instrument session.

      :param topology: Specifies the switch topology. If this argument is not
                       specified, the default value is "Configured Topology", which you
                       may override by setting ``MEASUREMENTLINK_NISWITCH_TOPOLOGY`` in
                       the configuration file (``.env``).
      :param simulate: Enables or disables simulation of the switch module. If
                       this argument is not specified, the default value is ``False``,
                       which you may override by setting
                       ``MEASUREMENTLINK_NISWITCH_SIMULATE`` in the configuration file
                       (``.env``).
      :param reset_device: Specifies whether to reset the switch module during
                           the initialization procedure.
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a session information object. The
                session object is available via the ``session`` field.

      :raises ValueError: If no relay driver sessions are reserved or
          too many relay driver sessions are reserved.

      .. seealso:: For more details, see :py:class:`niswitch.Session`.


   .. py:method:: initialize_niswitch_sessions(topology = None, simulate = None, reset_device = False, initialization_behavior = SessionInitializationBehavior.AUTO)

      Initialize multiple NI-SWITCH relay driver instrument sessions.

      :param topology: Specifies the switch topology. If this argument is not
                       specified, the default value is "Configured Topology", which you
                       may override by setting ``MEASUREMENTLINK_NISWITCH_TOPOLOGY`` in
                       the configuration file (``.env``).
      :param simulate: Enables or disables simulation of the switch module. If
                       this argument is not specified, the default value is ``False``,
                       which you may override by setting
                       ``MEASUREMENTLINK_NISWITCH_SIMULATE`` in the configuration file
                       (``.env``).
      :param reset_device: Specifies whether to reset the switch module during
                           the initialization procedure.
      :param initialization_behavior: Specifies whether the NI gRPC Device Server
                                      will initialize a new session or attach to an existing session.

      :returns: A context manager that yields a sequence of session information
                objects. The session objects are available via the ``session``
                field.

      :raises ValueError: If no relay driver sessions are reserved.

      .. seealso:: For more details, see :py:class:`niswitch.Session`.


   .. py:method:: get_niswitch_connection(relay_name = None, site = None)

      Get the NI-SWITCH relay driver connection matching the specified criteria.

      :param relay_name: The relay name to match against. If not specified, the
                         relay name is ignored when matching connections.
      :param site: The site number to match against. If not specified, the
                   site number is ignored when matching connections.

      :returns: The matching connection.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match or too many reserved
          connections match.


   .. py:method:: get_niswitch_connections(relay_names = None, sites = None)

      Get all NI-SWITCH relay driver connections matching the specified criteria.

      :param relay_names: The relay name(s) to match against. If not specified,
                          the relay name is ignored when matching connections.
      :param sites: The site number(s) to match against. If not specified, the
                    site number is ignored when matching connections.

      :returns: The matching connections.

      :raises TypeError: If the argument types or session type are incorrect.
      :raises ValueError: If no reserved connections match.



.. py:class:: SingleSessionReservation(session_manager, session_info, reserved_pin_or_relay_names = None, reserved_sites = None)


   Bases: :py:obj:`BaseReservation`

   Manages reservation for a single session.

   .. py:property:: session_info
      :type: ni_measurementlink_service.session_management._types.SessionInformation

      Single session information object.


.. py:class:: MultiSessionReservation(session_manager, session_info, reserved_pin_or_relay_names = None, reserved_sites = None)


   Bases: :py:obj:`BaseReservation`

   Manages reservation for multiple sessions.

   .. py:property:: session_info
      :type: List[ni_measurementlink_service.session_management._types.SessionInformation]

      Multiple session information objects.


