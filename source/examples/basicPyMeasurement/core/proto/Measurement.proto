//---------------------------------------------------------------------
//---------------------------------------------------------------------
syntax = "proto3";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
package Measurement_v1; 

//---------------------------------------------------------------------
//---------------------------------------------------------------------
import "google/protobuf/any.proto";

// Service that contains methods related to measurement
service MeasurementService {
  
  // API to get complete metadata
  rpc GetMetadata (GetMetadataRequest) returns (GetMetadataResponse);
  
  // API to measure
  rpc Measure (MeasureRequest) returns (MeasureResponse);  
}

// Service that contains methods related to service management
service ServiceManagementService {
  // API to stop the measurement service
  rpc StopService (StopServiceRequest) returns (StopServiceResponse);
}

// Below message is the metadata request which is currently empty
// Can add any fields in future as required
message GetMetadataRequest{}

// Contains measurement details
// Other details can be added in future as required
message MeasurementDetails{
  // Measurement Display name for client to display to user
  string display_name = 1;

  // Measurement version that helps to maintain versions of a measurement in future
  string version = 2;

  // Represents category of measurement for the ProductType(example: AC or DC measurements)
  // Helps to provide better UI experience(example: filter using measurement_type)
  string measurement_type = 3;

  // Represents type of the DUT(example: ADC, LDO,...)
  // Helps to provide better UI experience(example: filter using product_type)
  string product_type = 4;
}

// Contains measurement parameters details
message MeasurementParameters{
  // Configuration Message's Packagename.MessageName
  // This is used by client to set Any Typeurl
  string configuration_parameters_messagetype = 1;

  // Measurement configuration parameters details
  // Helps client to form request with configurations for executing measurement
  repeated ConfigurationParameter configuration_parameters = 2;

  // Output Message's Packagename.MessageName.
  // This is used by client to set Any Typeurl
  string outputs_messagetype = 3;

  // Measurement output details
  // Helps client to de-serialize measurement response after executing measurement
  repeated Output outputs = 4;
}

// Contains measurement User Interface details - other details can be added in future as required
message UserInterfaceDetails{
  // Measurement configuration UI URL
  // Helps client to load UI URL for user interactions
  string configuration_ui_url = 1;
}

// Contains all metadata related to measurement(Basic, Parameter and UserInterface)
message GetMetadataResponse{
  // Measurement details
  MeasurementDetails measurement_details = 1;

  // Measurement Configurations and outputs details
  MeasurementParameters measurement_parameters = 2;
    
  // Measurement User Interface details
  UserInterfaceDetails user_interface_details = 3;
}

// measurement configuration info that is part of metadata
message ConfigurationParameter {
  // Represents order of parameter
  // Used for gRPC message serialization
  // This allows measurement services to use the gRPC approach for backwards compatibility
  uint32 protobuf_id = 1;

  // Datatype of the parameter
  // Helps to de-serialize data into appropriate type
  Type type = 2;

  // Parameter name
  // Helps to bind UI elements with configurations
  string name = 3;

  // Represents if the value is repeated
  bool repeated = 4;

  // Parameter default value
  // Helps to show default value in the UI for binded UI element 
  oneof default_value {
  bool boolean_value = 5;
  double double_value = 6;
  float float_value = 7;
  int32 int32_value = 8;
  int64 int64_value = 9;
  string string_value = 10;
  uint32 uint32_value = 11;
  uint64 uint64_value = 12;
  DoubleArray1D double_1d_value = 13;
  }
}

// message with double array values
message DoubleArray1D {
    repeated double values = 1;
}

// measurement output info that is part of metadata
message Output {
  // Represents order of outputs
  // Used for gRPC message serialization
  // This allows measurement services to use the gRPC approach for backwards compatibility
  uint32 protobuf_id = 1;

  // Datatype of the output
  // Helps to de-serialize data into appropriate type
  Type type = 2;

  // output name
  // Helps to bind UI elements with outputs
  string name = 3;

  // Represents if the value is repeated
  bool repeated = 4;
}

// Datatype enum taken from google's descriptor proto
// TODO - update if descriptor proto has updates in future
// Supports bool, double, float, int32, int64, string, uint32, uint64 in base version 
// Others will be supported as needed in future 
enum Type {
  TYPE_UNSPECIFIED = 0;
  // Order is weird for historical reasons.
  TYPE_DOUBLE = 1;
  TYPE_FLOAT = 2;
  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
  // negative values are likely.
  TYPE_INT64 = 3;
  TYPE_UINT64 = 4;
  // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
  // negative values are likely.
  TYPE_INT32 = 5;
  TYPE_FIXED64 = 6;
  TYPE_FIXED32 = 7;
  TYPE_BOOL = 8;
  TYPE_STRING = 9;
  // Tag-delimited aggregate.
  // Group type is deprecated and not supported in proto3. However, Proto3
  // implementations should still be able to parse the group wire format and
  // treat group fields as unknown fields.
  TYPE_GROUP = 10;
  // Length-delimited aggregate.
  TYPE_MESSAGE = 11;

  // New in version 2.
  TYPE_BYTES = 12;
  TYPE_UINT32 = 13;
  TYPE_ENUM = 14;
  TYPE_SFIXED32 = 15;
  TYPE_SFIXED64 = 16;
  // Uses ZigZag encoding.
  TYPE_SINT32 = 17;
  // Uses ZigZag encoding.
  TYPE_SINT64 = 18;
}

// message that holds measurement configurations at run time
message MeasureRequest{
  google.protobuf.Any configuration_parameters = 1;
}

// message that holds measurement outputs at run time
message MeasureResponse{
  ErrorInformation error = 1;
  repeated MeasurementValue outputs = 2;
}

message MeasurementValue{
  // Measurement value
  // Contains defined types for measurement output
  // TODO - Specific type fields can be added once oneof is supported in LabVIEW
  oneof value {
  google.protobuf.Any any = 1;
  }
}

// Represent the error details
message ErrorInformation{
  bool is_error = 1;
  int32 error_code = 2;
  string error_details = 3;
}

// Stop Measurement service request - Can add fields in future as required
message StopServiceRequest{}

//Stop Measurement service response - Can add fields in future as required
message StopServiceResponse{}