# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ni_measurementlink_service._internal.stubs.ni.measurementlink.pinmap.v1 import pin_map_service_pb2 as ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2


class PinMapServiceStub(object):
    """Service to keep track of pin map resources.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreatePinMapFromXml = channel.unary_unary(
                '/ni.measurementlink.pinmap.v1.PinMapService/CreatePinMapFromXml',
                request_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.CreatePinMapFromXmlRequest.SerializeToString,
                response_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.FromString,
                )
        self.UpdatePinMapFromXml = channel.unary_unary(
                '/ni.measurementlink.pinmap.v1.PinMapService/UpdatePinMapFromXml',
                request_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.UpdatePinMapFromXmlRequest.SerializeToString,
                response_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.FromString,
                )
        self.GetPinMap = channel.unary_unary(
                '/ni.measurementlink.pinmap.v1.PinMapService/GetPinMap',
                request_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.GetPinMapRequest.SerializeToString,
                response_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.FromString,
                )
        self.QueryPins = channel.unary_unary(
                '/ni.measurementlink.pinmap.v1.PinMapService/QueryPins',
                request_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryPinsRequest.SerializeToString,
                response_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryPinsResponse.FromString,
                )
        self.QueryRelays = channel.unary_unary(
                '/ni.measurementlink.pinmap.v1.PinMapService/QueryRelays',
                request_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryRelaysRequest.SerializeToString,
                response_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryRelaysResponse.FromString,
                )
        self.QueryResourceAccessInformation = channel.unary_unary(
                '/ni.measurementlink.pinmap.v1.PinMapService/QueryResourceAccessInformation',
                request_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryResourceAccessInformationRequest.SerializeToString,
                response_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryResourceAccessInformationResponse.FromString,
                )


class PinMapServiceServicer(object):
    """Service to keep track of pin map resources.
    """

    def CreatePinMapFromXml(self, request, context):
        """Registers pin map with the PinMapService and returns a pin map resource.
        Status Codes for errors:
        - INVALID_ARGUMENT: Pin map id is empty or has whitespace, or pin map xml string is not valid
        - ALREADY_EXISTS: Pin map resource with the specified pin map id already exists
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePinMapFromXml(self, request, context):
        """Updates registered pin map contents and returns it.
        Creates and registers a pin map if a pin map resource for the specified pin map id is not found.
        Status Codes for errors:
        - INVALID_ARGUMENT: Pin map xml string is not valid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPinMap(self, request, context):
        """Get registered pin map resource.
        Status Codes for errors:
        - NOT_FOUND: Pin map resource for the specified pin map id is not found
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryPins(self, request, context):
        """Returns list of pins from the registered pin map resource.
        Status Codes for errors:
        - NOT_FOUND: Pin map resource for the specified pin map id is not found
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryRelays(self, request, context):
        """Returns list of relays from the registered pin map resource.
        Status Codes for errors:
        - NOT_FOUND: Pin map resource for the specified pin map id is not found
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryResourceAccessInformation(self, request, context):
        """Get instrument resource names, channels, and instrument type for the specified sites, pins or pin groups, relays or relay groups, instrument type in the registered pin map resource.
        Status Codes for errors:
        - NOT_FOUND:
        - Pin map resource for the specified pin map id is not found.
        - Specified site number is not in the valid range for the registered pin map.
        - INVALID_ARGUMENT:
        - Specified pin or relay is not present in the registered pin map resource.
        - Empty string specified for a pin or relay name.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PinMapServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreatePinMapFromXml': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePinMapFromXml,
                    request_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.CreatePinMapFromXmlRequest.FromString,
                    response_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.SerializeToString,
            ),
            'UpdatePinMapFromXml': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePinMapFromXml,
                    request_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.UpdatePinMapFromXmlRequest.FromString,
                    response_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.SerializeToString,
            ),
            'GetPinMap': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPinMap,
                    request_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.GetPinMapRequest.FromString,
                    response_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.SerializeToString,
            ),
            'QueryPins': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPins,
                    request_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryPinsRequest.FromString,
                    response_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryPinsResponse.SerializeToString,
            ),
            'QueryRelays': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryRelays,
                    request_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryRelaysRequest.FromString,
                    response_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryRelaysResponse.SerializeToString,
            ),
            'QueryResourceAccessInformation': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryResourceAccessInformation,
                    request_deserializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryResourceAccessInformationRequest.FromString,
                    response_serializer=ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryResourceAccessInformationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ni.measurementlink.pinmap.v1.PinMapService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PinMapService(object):
    """Service to keep track of pin map resources.
    """

    @staticmethod
    def CreatePinMapFromXml(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurementlink.pinmap.v1.PinMapService/CreatePinMapFromXml',
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.CreatePinMapFromXmlRequest.SerializeToString,
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdatePinMapFromXml(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurementlink.pinmap.v1.PinMapService/UpdatePinMapFromXml',
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.UpdatePinMapFromXmlRequest.SerializeToString,
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPinMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurementlink.pinmap.v1.PinMapService/GetPinMap',
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.GetPinMapRequest.SerializeToString,
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.PinMap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryPins(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurementlink.pinmap.v1.PinMapService/QueryPins',
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryPinsRequest.SerializeToString,
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryPinsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryRelays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurementlink.pinmap.v1.PinMapService/QueryRelays',
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryRelaysRequest.SerializeToString,
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryRelaysResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryResourceAccessInformation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ni.measurementlink.pinmap.v1.PinMapService/QueryResourceAccessInformation',
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryResourceAccessInformationRequest.SerializeToString,
            ni_dot_measurementlink_dot_pinmap_dot_v1_dot_pin__map__service__pb2.QueryResourceAccessInformationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
