"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
---------------------------------------------------------------------
---------------------------------------------------------------------
"""

import abc
import collections.abc
import grpc
import grpc.aio
import ni_measurement_plugin_sdk_service._internal.stubs.ni.datamonikers.v1.data_moniker_pb2 as ni_datamonikers_v1_data_moniker_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class MonikerServiceStub:
    """---------------------------------------------------------------------
    ---------------------------------------------------------------------
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    BeginSidebandStream: grpc.UnaryUnaryMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamRequest,
        ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamResponse,
    ]

    StreamRead: grpc.UnaryStreamMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.MonikerList,
        ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult,
    ]

    StreamWrite: grpc.StreamStreamMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.MonikerWriteRequest,
        ni_datamonikers_v1_data_moniker_pb2.StreamWriteResponse,
    ]

    StreamReadWrite: grpc.StreamStreamMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.MonikerWriteRequest,
        ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult,
    ]

    ReadFromMoniker: grpc.UnaryUnaryMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.Moniker,
        ni_datamonikers_v1_data_moniker_pb2.ReadFromMonikerResult,
    ]

    WriteToMoniker: grpc.UnaryUnaryMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerRequest,
        ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerResponse,
    ]

class MonikerServiceAsyncStub:
    """---------------------------------------------------------------------
    ---------------------------------------------------------------------
    """

    BeginSidebandStream: grpc.aio.UnaryUnaryMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamRequest,
        ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamResponse,
    ]

    StreamRead: grpc.aio.UnaryStreamMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.MonikerList,
        ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult,
    ]

    StreamWrite: grpc.aio.StreamStreamMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.MonikerWriteRequest,
        ni_datamonikers_v1_data_moniker_pb2.StreamWriteResponse,
    ]

    StreamReadWrite: grpc.aio.StreamStreamMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.MonikerWriteRequest,
        ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult,
    ]

    ReadFromMoniker: grpc.aio.UnaryUnaryMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.Moniker,
        ni_datamonikers_v1_data_moniker_pb2.ReadFromMonikerResult,
    ]

    WriteToMoniker: grpc.aio.UnaryUnaryMultiCallable[
        ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerRequest,
        ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerResponse,
    ]

class MonikerServiceServicer(metaclass=abc.ABCMeta):
    """---------------------------------------------------------------------
    ---------------------------------------------------------------------
    """

    @abc.abstractmethod
    def BeginSidebandStream(
        self,
        request: ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamResponse, collections.abc.Awaitable[ni_datamonikers_v1_data_moniker_pb2.BeginMonikerSidebandStreamResponse]]: ...

    @abc.abstractmethod
    def StreamRead(
        self,
        request: ni_datamonikers_v1_data_moniker_pb2.MonikerList,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult], collections.abc.AsyncIterator[ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult]]: ...

    @abc.abstractmethod
    def StreamWrite(
        self,
        request_iterator: _MaybeAsyncIterator[ni_datamonikers_v1_data_moniker_pb2.MonikerWriteRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ni_datamonikers_v1_data_moniker_pb2.StreamWriteResponse], collections.abc.AsyncIterator[ni_datamonikers_v1_data_moniker_pb2.StreamWriteResponse]]: ...

    @abc.abstractmethod
    def StreamReadWrite(
        self,
        request_iterator: _MaybeAsyncIterator[ni_datamonikers_v1_data_moniker_pb2.MonikerWriteRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult], collections.abc.AsyncIterator[ni_datamonikers_v1_data_moniker_pb2.MonikerReadResult]]: ...

    @abc.abstractmethod
    def ReadFromMoniker(
        self,
        request: ni_datamonikers_v1_data_moniker_pb2.Moniker,
        context: _ServicerContext,
    ) -> typing.Union[ni_datamonikers_v1_data_moniker_pb2.ReadFromMonikerResult, collections.abc.Awaitable[ni_datamonikers_v1_data_moniker_pb2.ReadFromMonikerResult]]: ...

    @abc.abstractmethod
    def WriteToMoniker(
        self,
        request: ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerResponse, collections.abc.Awaitable[ni_datamonikers_v1_data_moniker_pb2.WriteToMonikerResponse]]: ...

def add_MonikerServiceServicer_to_server(servicer: MonikerServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
