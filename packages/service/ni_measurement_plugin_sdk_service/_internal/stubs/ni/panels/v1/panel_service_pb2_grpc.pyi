"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import ni_measurement_plugin_sdk_service._internal.stubs.ni.panels.v1.panel_service_pb2 as ni_panels_v1_panel_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class PanelServiceStub:
    """Service interface for interacting with NI panels"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StartPanel: grpc.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.StartPanelRequest,
        ni_panels_v1_panel_service_pb2.StartPanelResponse,
    ]
    """Start a panel using the provided configuration (or connect to if it has already been started)
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The panel configuration has an invalid argument.
    - NOT_FOUND:
      - The panel configuration includes a file that was not found.
    """

    StopPanel: grpc.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.StopPanelRequest,
        ni_panels_v1_panel_service_pb2.StopPanelResponse,
    ]
    """Stop a panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
    """

    EnumeratePanels: grpc.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.EnumeratePanelsRequest,
        ni_panels_v1_panel_service_pb2.EnumeratePanelsResponse,
    ]
    """Enumerate the panels available in the system, including information about the state of the panels and what values they have.
    Status Codes for errors:
    """

    GetValue: grpc.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.GetValueRequest,
        ni_panels_v1_panel_service_pb2.GetValueResponse,
    ]
    """Get a value for a control on the panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The value identifier contains invalid characters.
    - NOT_FOUND:
      - The value with the specified identifier was not found.
    """

    TryGetValue: grpc.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.TryGetValueRequest,
        ni_panels_v1_panel_service_pb2.TryGetValueResponse,
    ]
    """Try to get a value for a control on the panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The value identifier contains invalid characters.
    """

    SetValue: grpc.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.SetValueRequest,
        ni_panels_v1_panel_service_pb2.SetValueResponse,
    ]
    """Set a value for a control on the panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The value identifier contains invalid characters.
    """

class PanelServiceAsyncStub:
    """Service interface for interacting with NI panels"""

    StartPanel: grpc.aio.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.StartPanelRequest,
        ni_panels_v1_panel_service_pb2.StartPanelResponse,
    ]
    """Start a panel using the provided configuration (or connect to if it has already been started)
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The panel configuration has an invalid argument.
    - NOT_FOUND:
      - The panel configuration includes a file that was not found.
    """

    StopPanel: grpc.aio.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.StopPanelRequest,
        ni_panels_v1_panel_service_pb2.StopPanelResponse,
    ]
    """Stop a panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
    """

    EnumeratePanels: grpc.aio.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.EnumeratePanelsRequest,
        ni_panels_v1_panel_service_pb2.EnumeratePanelsResponse,
    ]
    """Enumerate the panels available in the system, including information about the state of the panels and what values they have.
    Status Codes for errors:
    """

    GetValue: grpc.aio.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.GetValueRequest,
        ni_panels_v1_panel_service_pb2.GetValueResponse,
    ]
    """Get a value for a control on the panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The value identifier contains invalid characters.
    - NOT_FOUND:
      - The value with the specified identifier was not found.
    """

    TryGetValue: grpc.aio.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.TryGetValueRequest,
        ni_panels_v1_panel_service_pb2.TryGetValueResponse,
    ]
    """Try to get a value for a control on the panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The value identifier contains invalid characters.
    """

    SetValue: grpc.aio.UnaryUnaryMultiCallable[
        ni_panels_v1_panel_service_pb2.SetValueRequest,
        ni_panels_v1_panel_service_pb2.SetValueResponse,
    ]
    """Set a value for a control on the panel
    Status Codes for errors:
    - INVALID_ARGUMENT:
      - The panel identifier contains invalid characters.
      - The value identifier contains invalid characters.
    """

class PanelServiceServicer(metaclass=abc.ABCMeta):
    """Service interface for interacting with NI panels"""

    @abc.abstractmethod
    def StartPanel(
        self,
        request: ni_panels_v1_panel_service_pb2.StartPanelRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_panels_v1_panel_service_pb2.StartPanelResponse, collections.abc.Awaitable[ni_panels_v1_panel_service_pb2.StartPanelResponse]]:
        """Start a panel using the provided configuration (or connect to if it has already been started)
        Status Codes for errors:
        - INVALID_ARGUMENT:
          - The panel identifier contains invalid characters.
          - The panel configuration has an invalid argument.
        - NOT_FOUND:
          - The panel configuration includes a file that was not found.
        """

    @abc.abstractmethod
    def StopPanel(
        self,
        request: ni_panels_v1_panel_service_pb2.StopPanelRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_panels_v1_panel_service_pb2.StopPanelResponse, collections.abc.Awaitable[ni_panels_v1_panel_service_pb2.StopPanelResponse]]:
        """Stop a panel
        Status Codes for errors:
        - INVALID_ARGUMENT:
          - The panel identifier contains invalid characters.
        """

    @abc.abstractmethod
    def EnumeratePanels(
        self,
        request: ni_panels_v1_panel_service_pb2.EnumeratePanelsRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_panels_v1_panel_service_pb2.EnumeratePanelsResponse, collections.abc.Awaitable[ni_panels_v1_panel_service_pb2.EnumeratePanelsResponse]]:
        """Enumerate the panels available in the system, including information about the state of the panels and what values they have.
        Status Codes for errors:
        """

    @abc.abstractmethod
    def GetValue(
        self,
        request: ni_panels_v1_panel_service_pb2.GetValueRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_panels_v1_panel_service_pb2.GetValueResponse, collections.abc.Awaitable[ni_panels_v1_panel_service_pb2.GetValueResponse]]:
        """Get a value for a control on the panel
        Status Codes for errors:
        - INVALID_ARGUMENT:
          - The panel identifier contains invalid characters.
          - The value identifier contains invalid characters.
        - NOT_FOUND:
          - The value with the specified identifier was not found.
        """

    @abc.abstractmethod
    def TryGetValue(
        self,
        request: ni_panels_v1_panel_service_pb2.TryGetValueRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_panels_v1_panel_service_pb2.TryGetValueResponse, collections.abc.Awaitable[ni_panels_v1_panel_service_pb2.TryGetValueResponse]]:
        """Try to get a value for a control on the panel
        Status Codes for errors:
        - INVALID_ARGUMENT:
          - The panel identifier contains invalid characters.
          - The value identifier contains invalid characters.
        """

    @abc.abstractmethod
    def SetValue(
        self,
        request: ni_panels_v1_panel_service_pb2.SetValueRequest,
        context: _ServicerContext,
    ) -> typing.Union[ni_panels_v1_panel_service_pb2.SetValueResponse, collections.abc.Awaitable[ni_panels_v1_panel_service_pb2.SetValueResponse]]:
        """Set a value for a control on the panel
        Status Codes for errors:
        - INVALID_ARGUMENT:
          - The panel identifier contains invalid characters.
          - The value identifier contains invalid characters.
        """

def add_PanelServiceServicer_to_server(servicer: PanelServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
