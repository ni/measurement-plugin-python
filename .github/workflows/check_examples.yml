name: Check examples

on:
  workflow_call:
  workflow_dispatch:

env:
  POETRY_VERSION: 1.2.2
  PYTHON_VERSION: 3.9

jobs:
  check_examples:
    name: Check examples
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v4
      - name: Set up Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Lock examples
        run: |
          for example in examples/*/; do
            echo "::group::$example"
            pushd $example
            poetry lock
            popd
            echo "::endgroup::"
          done
      - name: Cache virtualenvs
        uses: actions/cache@v3
        with:
          path: 'examples/**/.venv'
          key: examples-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('examples/**/poetry.lock') }}
      - name: Install examples
        run: |
          for example in examples/*/; do
            echo "::group::$example"
            pushd $example
            poetry install -v
            popd
            echo "::endgroup::"
          done
      - name: Lint examples
        run: |
          for example in examples/*/; do
            echo "::group::$example"
            pushd $example
            poetry run ni-python-styleguide lint
            popd
            echo "::endgroup::"
          done
      - name: Mypy static analysis (examples, Linux)
        run: |
          for example in examples/*/; do
            echo "::group::$example"
            pushd $example
            poetry run mypy .
            popd
            echo "::endgroup::"
          done
      - name: Mypy static analysis (examples, Windows)
        run: |
          for example in examples/*/; do
            echo "::group::$example"
            pushd $example
            poetry run mypy . --platform win32
            popd
            echo "::endgroup::"
          done
